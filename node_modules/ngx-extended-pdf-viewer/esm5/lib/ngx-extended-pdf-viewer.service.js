/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-extended-pdf-viewer.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgxExtendedPdfViewerComponent } from './ngx-extended-pdf-viewer.component';
/**
 * @record
 */
export function FindOptions() { }
if (false) {
    /** @type {?|undefined} */
    FindOptions.prototype.highlightAll;
    /** @type {?|undefined} */
    FindOptions.prototype.matchCase;
    /** @type {?|undefined} */
    FindOptions.prototype.wholeWords;
    /** @type {?|undefined} */
    FindOptions.prototype.ignoreAccents;
    /** @type {?|undefined} */
    FindOptions.prototype.findMultipleSearchTexts;
}
var NgxExtendedPdfViewerService = /** @class */ (function () {
    function NgxExtendedPdfViewerService() {
    }
    /**
     * @param {?} text
     * @param {?=} options
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.findMultiple = /**
     * @param {?} text
     * @param {?=} options
     * @return {?}
     */
    function (text, options) {
        if (options === void 0) { options = {}; }
        options = tslib_1.__assign({}, options, { findMultipleSearchTexts: true });
        /** @type {?} */
        var searchString = text.join('\n') + '\n';
        return this.find(searchString, options);
    };
    /**
     * @param {?} text
     * @param {?=} options
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.find = /**
     * @param {?} text
     * @param {?=} options
     * @return {?}
     */
    function (text, options) {
        if (options === void 0) { options = {}; }
        if (!NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("The PDF viewer hasn't finished initializing. Please call find() later.");
            return false;
        }
        else {
            /** @type {?} */
            var highlightAllCheckbox = (/** @type {?} */ (document.getElementById('findHighlightAll')));
            if (highlightAllCheckbox) {
                highlightAllCheckbox.checked = options.highlightAll || false;
            }
            /** @type {?} */
            var matchCaseCheckbox = (/** @type {?} */ (document.getElementById('findMatchCase')));
            if (matchCaseCheckbox) {
                matchCaseCheckbox.checked = options.matchCase || false;
            }
            /** @type {?} */
            var entireWordCheckbox = (/** @type {?} */ (document.getElementById('findEntireWord')));
            if (entireWordCheckbox) {
                entireWordCheckbox.checked = options.wholeWords || false;
            }
            /** @type {?} */
            var findIgnoreAccentsCheckbox = (/** @type {?} */ (document.getElementById('findIgnoreAccents')));
            if (findIgnoreAccentsCheckbox) {
                findIgnoreAccentsCheckbox.checked = options.ignoreAccents || false;
            }
            /** @type {?} */
            var multipleSearchTerms = options.findMultipleSearchTexts || text.includes('\n') || false;
            /** @type {?} */
            var findMultipleSearchTextsCheckbox = (/** @type {?} */ (document.getElementById('findMultipleSearchTexts')));
            if (findMultipleSearchTextsCheckbox) {
                findMultipleSearchTextsCheckbox.checked = multipleSearchTerms;
            }
            /** @type {?} */
            var individualWordsModeCheckbox = (/** @type {?} */ (document.getElementById('individualWordsMode')));
            if (individualWordsModeCheckbox) {
                individualWordsModeCheckbox.checked = false;
            }
            /** @type {?} */
            var inputField = multipleSearchTerms ? document.getElementById('findInputMultiline') : document.getElementById('findInput');
            if (inputField) {
                if (inputField instanceof HTMLTextAreaElement) {
                    inputField.value = text;
                    // todo dirty hack!
                    inputField.classList.remove('hidden');
                    ((/** @type {?} */ (document.getElementById('findInput')))).classList.add('hidden');
                    ((/** @type {?} */ (document.getElementById('individualWordsModeLabel')))).classList.remove('hidden');
                    ((/** @type {?} */ (document.getElementById('individualWordsMode')))).classList.remove('hidden');
                    // end of the dirty hack
                }
                else if (inputField instanceof HTMLInputElement) {
                    inputField.value = text;
                    // todo dirty hack!
                    inputField.classList.remove('hidden');
                    ((/** @type {?} */ (document.getElementById('findInputMultiline')))).classList.add('hidden');
                    ((/** @type {?} */ (document.getElementById('individualWordsModeLabel')))).classList.add('hidden');
                    ((/** @type {?} */ (document.getElementById('individualWordsMode')))).classList.add('hidden');
                    // end of the dirty hack
                }
                inputField.dispatchEvent(new Event('input'));
                return true;
            }
            else {
                // tslint:disable-next-line:quotemark
                console.error("Unexpected error: the input field used to search isn't part of the DOM.");
                return false;
            }
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.findNext = /**
     * @return {?}
     */
    function () {
        if (!NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("The PDF viewer hasn't finished initializing. Please call findNext() later.");
            return false;
        }
        else {
            /** @type {?} */
            var button = document.getElementById('findNext');
            if (button) {
                button.click();
                return true;
            }
            return false;
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.findPrevious = /**
     * @return {?}
     */
    function () {
        if (!NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("The PDF viewer hasn't finished initializing. Please call findPrevious() later.");
            return false;
        }
        else {
            /** @type {?} */
            var button = document.getElementById('findPrevious');
            if (button) {
                button.click();
                return true;
            }
            return false;
        }
    };
    /**
     * @param {?=} printRange
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.print = /**
     * @param {?=} printRange
     * @return {?}
     */
    function (printRange) {
        var _this = this;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        /** @type {?} */
        var alreadyThere = !!window['isInPDFPrintRange'] && (!printRange);
        if (!alreadyThere) {
            if (!printRange) {
                printRange = (/** @type {?} */ ({}));
            }
            this.setPrintRange(printRange);
        }
        ((/** @type {?} */ (window))).printPDF();
        if (!alreadyThere) {
            PDFViewerApplication.eventBus.on('afterprint', (/**
             * @return {?}
             */
            function () {
                _this.removePrintRange();
            }));
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.removePrintRange = /**
     * @return {?}
     */
    function () {
        window['isInPDFPrintRange'] = undefined;
        window['filteredPageCount'] = undefined;
    };
    /**
     * @param {?} printRange
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.setPrintRange = /**
     * @param {?} printRange
     * @return {?}
     */
    function (printRange) {
        var _this = this;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        window['isInPDFPrintRange'] = (/**
         * @param {?} page
         * @return {?}
         */
        function (page) { return _this.isInPDFPrintRange(page, (/** @type {?} */ (printRange))); });
        window['filteredPageCount'] = this.filteredPageCount(PDFViewerApplication.pagesCount, printRange);
    };
    /**
     * @param {?} pageCount
     * @param {?} range
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.filteredPageCount = /**
     * @param {?} pageCount
     * @param {?} range
     * @return {?}
     */
    function (pageCount, range) {
        /** @type {?} */
        var result = 0;
        for (var page = 1; page <= pageCount; page++) {
            if (this.isInPDFPrintRange(page, range)) {
                result++;
            }
        }
        return result;
    };
    /**
     * @param {?} pageIndex
     * @param {?} printRange
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.isInPDFPrintRange = /**
     * @param {?} pageIndex
     * @param {?} printRange
     * @return {?}
     */
    function (pageIndex, printRange) {
        /** @type {?} */
        var page = pageIndex + 1;
        if (printRange.from) {
            if (page < printRange.from) {
                return false;
            }
        }
        if (printRange.to) {
            if (page > printRange.to) {
                return false;
            }
        }
        if (printRange.excluded) {
            /** @type {?} */
            var e = (/** @type {?} */ (printRange.excluded));
            if (e.some((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p === page; }))) {
                return false;
            }
        }
        if (printRange.included) {
            if (!printRange.included.some((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p === page; }))) {
                return false;
            }
        }
        return true;
    };
    return NgxExtendedPdfViewerService;
}());
export { NgxExtendedPdfViewerService };
//# sourceMappingURL=data:application/json;base64,