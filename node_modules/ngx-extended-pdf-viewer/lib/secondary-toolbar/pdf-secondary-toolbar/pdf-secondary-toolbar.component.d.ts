import { OnInit, EventEmitter, OnChanges, SimpleChanges, TemplateRef, ElementRef, AfterViewInit, NgZone } from '@angular/core';
import { PDFNotificationService } from './../../pdf-notification-service';
import * as ɵngcc0 from '@angular/core';
export declare class PdfSecondaryToolbarComponent implements OnInit, OnChanges, AfterViewInit {
    private element;
    private notificationService;
    private ngZone;
    customSecondaryToolbar: TemplateRef<any>;
    secondaryToolbarTop: any;
    mobileFriendlyZoomScale: number;
    showPresentationModeButton: boolean;
    showOpenFileButton: boolean;
    showPrintButton: boolean;
    showDownloadButton: boolean;
    showBookmarkButton: boolean;
    showPagingButtons: boolean;
    showRotateButton: boolean;
    showHandToolButton: boolean;
    showScrollingButton: boolean;
    showSpreadButton: boolean;
    showPropertiesButton: boolean;
    spreadChange: EventEmitter<string>;
    secondaryMenuIsEmpty: EventEmitter<boolean>;
    disablePreviousPage: boolean;
    disableNextPage: boolean;
    constructor(element: ElementRef, notificationService: PDFNotificationService, ngZone: NgZone);
    onPdfJsInit(): void;
    updateUIState(): void;
    onSpreadChange(newSpread: string): void;
    ngOnChanges(changes: SimpleChanges): void;
    onResize(): void;
    ngAfterViewInit(): void;
    ngOnInit(): void;
    checkVisibility(): void;
    private checkVisibilityRecursively;
    previousPage(): void;
    nextPage(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PdfSecondaryToolbarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PdfSecondaryToolbarComponent, "pdf-secondary-toolbar", never, { "showPresentationModeButton": "showPresentationModeButton"; "showOpenFileButton": "showOpenFileButton"; "showPrintButton": "showPrintButton"; "showDownloadButton": "showDownloadButton"; "showBookmarkButton": "showBookmarkButton"; "showPagingButtons": "showPagingButtons"; "showRotateButton": "showRotateButton"; "showHandToolButton": "showHandToolButton"; "showScrollingButton": "showScrollingButton"; "showSpreadButton": "showSpreadButton"; "showPropertiesButton": "showPropertiesButton"; "customSecondaryToolbar": "customSecondaryToolbar"; "secondaryToolbarTop": "secondaryToolbarTop"; "mobileFriendlyZoomScale": "mobileFriendlyZoomScale"; }, { "spreadChange": "spreadChange"; "secondaryMenuIsEmpty": "secondaryMenuIsEmpty"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLXNlY29uZGFyeS10b29sYmFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwZGYtc2Vjb25kYXJ5LXRvb2xiYXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQREZOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi9wZGYtbm90aWZpY2F0aW9uLXNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGRmU2Vjb25kYXJ5VG9vbGJhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBub3RpZmljYXRpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIGN1c3RvbVNlY29uZGFyeVRvb2xiYXI6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgc2Vjb25kYXJ5VG9vbGJhclRvcDogYW55O1xuICAgIG1vYmlsZUZyaWVuZGx5Wm9vbVNjYWxlOiBudW1iZXI7XG4gICAgc2hvd1ByZXNlbnRhdGlvbk1vZGVCdXR0b246IGJvb2xlYW47XG4gICAgc2hvd09wZW5GaWxlQnV0dG9uOiBib29sZWFuO1xuICAgIHNob3dQcmludEJ1dHRvbjogYm9vbGVhbjtcbiAgICBzaG93RG93bmxvYWRCdXR0b246IGJvb2xlYW47XG4gICAgc2hvd0Jvb2ttYXJrQnV0dG9uOiBib29sZWFuO1xuICAgIHNob3dQYWdpbmdCdXR0b25zOiBib29sZWFuO1xuICAgIHNob3dSb3RhdGVCdXR0b246IGJvb2xlYW47XG4gICAgc2hvd0hhbmRUb29sQnV0dG9uOiBib29sZWFuO1xuICAgIHNob3dTY3JvbGxpbmdCdXR0b246IGJvb2xlYW47XG4gICAgc2hvd1NwcmVhZEJ1dHRvbjogYm9vbGVhbjtcbiAgICBzaG93UHJvcGVydGllc0J1dHRvbjogYm9vbGVhbjtcbiAgICBzcHJlYWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIHNlY29uZGFyeU1lbnVJc0VtcHR5OiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgZGlzYWJsZVByZXZpb3VzUGFnZTogYm9vbGVhbjtcbiAgICBkaXNhYmxlTmV4dFBhZ2U6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgbm90aWZpY2F0aW9uU2VydmljZTogUERGTm90aWZpY2F0aW9uU2VydmljZSwgbmdab25lOiBOZ1pvbmUpO1xuICAgIG9uUGRmSnNJbml0KCk6IHZvaWQ7XG4gICAgdXBkYXRlVUlTdGF0ZSgpOiB2b2lkO1xuICAgIG9uU3ByZWFkQ2hhbmdlKG5ld1NwcmVhZDogc3RyaW5nKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBvblJlc2l6ZSgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgY2hlY2tWaXNpYmlsaXR5KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGVja1Zpc2liaWxpdHlSZWN1cnNpdmVseTtcbiAgICBwcmV2aW91c1BhZ2UoKTogdm9pZDtcbiAgICBuZXh0UGFnZSgpOiB2b2lkO1xufVxuIl19