import { Toast } from './toast';
import { IClearWrapper } from './clearWrapper';
import { Observable, Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class ToasterService {
    addToast: Observable<Toast>;
    private _addToast;
    clearToasts: Observable<IClearWrapper>;
    private _clearToasts;
    removeToast: Observable<IClearWrapper>;
    /** @internal */
    _removeToastSubject: Subject<IClearWrapper>;
    /**
     * Creates an instance of ToasterService.
     */
    constructor();
    /**
     * Synchronously create and show a new toast instance.
     *
     * @param {(string | Toast)} type The type of the toast, or a Toast object.
     * @param {string=} title The toast title.
     * @param {string=} body The toast body.
     * @returns {Toast}
     *          The newly created Toast instance with a randomly generated GUID Id.
     */
    pop(type: string | Toast, title?: string, body?: string): Toast;
    /**
     * Asynchronously create and show a new toast instance.
     *
     * @param {(string | Toast)} type The type of the toast, or a Toast object.
     * @param {string=} title The toast title.
     * @param {string=} body The toast body.
     * @returns {Observable<Toast>}
     *          A hot Observable that can be subscribed to in order to receive the Toast instance
     *          with a randomly generated GUID Id.
     */
    popAsync(type: string | Toast, title?: string, body?: string): Observable<Toast>;
    /**
     * Clears a toast by toastId and/or toastContainerId.
     *
     * @param {string} toastId The toastId to clear.
     * @param {number=} toastContainerId
     *        The toastContainerId of the container to remove toasts from.
     */
    clear(toastId?: string, toastContainerId?: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToasterService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ToasterService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Rlci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInRvYXN0ZXIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRvYXN0IH0gZnJvbSAnLi90b2FzdCc7XG5pbXBvcnQgeyBJQ2xlYXJXcmFwcGVyIH0gZnJvbSAnLi9jbGVhcldyYXBwZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3RlclNlcnZpY2Uge1xuICAgIGFkZFRvYXN0OiBPYnNlcnZhYmxlPFRvYXN0PjtcbiAgICBwcml2YXRlIF9hZGRUb2FzdDtcbiAgICBjbGVhclRvYXN0czogT2JzZXJ2YWJsZTxJQ2xlYXJXcmFwcGVyPjtcbiAgICBwcml2YXRlIF9jbGVhclRvYXN0cztcbiAgICByZW1vdmVUb2FzdDogT2JzZXJ2YWJsZTxJQ2xlYXJXcmFwcGVyPjtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3JlbW92ZVRvYXN0U3ViamVjdDogU3ViamVjdDxJQ2xlYXJXcmFwcGVyPjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFRvYXN0ZXJTZXJ2aWNlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCk7XG4gICAgLyoqXG4gICAgICogU3luY2hyb25vdXNseSBjcmVhdGUgYW5kIHNob3cgYSBuZXcgdG9hc3QgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyhzdHJpbmcgfCBUb2FzdCl9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIHRvYXN0LCBvciBhIFRvYXN0IG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHRpdGxlIFRoZSB0b2FzdCB0aXRsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGJvZHkgVGhlIHRvYXN0IGJvZHkuXG4gICAgICogQHJldHVybnMge1RvYXN0fVxuICAgICAqICAgICAgICAgIFRoZSBuZXdseSBjcmVhdGVkIFRvYXN0IGluc3RhbmNlIHdpdGggYSByYW5kb21seSBnZW5lcmF0ZWQgR1VJRCBJZC5cbiAgICAgKi9cbiAgICBwb3AodHlwZTogc3RyaW5nIHwgVG9hc3QsIHRpdGxlPzogc3RyaW5nLCBib2R5Pzogc3RyaW5nKTogVG9hc3Q7XG4gICAgLyoqXG4gICAgICogQXN5bmNocm9ub3VzbHkgY3JlYXRlIGFuZCBzaG93IGEgbmV3IHRvYXN0IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsoc3RyaW5nIHwgVG9hc3QpfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSB0b2FzdCwgb3IgYSBUb2FzdCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0aXRsZSBUaGUgdG9hc3QgdGl0bGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBib2R5IFRoZSB0b2FzdCBib2R5LlxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPFRvYXN0Pn1cbiAgICAgKiAgICAgICAgICBBIGhvdCBPYnNlcnZhYmxlIHRoYXQgY2FuIGJlIHN1YnNjcmliZWQgdG8gaW4gb3JkZXIgdG8gcmVjZWl2ZSB0aGUgVG9hc3QgaW5zdGFuY2VcbiAgICAgKiAgICAgICAgICB3aXRoIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIEdVSUQgSWQuXG4gICAgICovXG4gICAgcG9wQXN5bmModHlwZTogc3RyaW5nIHwgVG9hc3QsIHRpdGxlPzogc3RyaW5nLCBib2R5Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxUb2FzdD47XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGEgdG9hc3QgYnkgdG9hc3RJZCBhbmQvb3IgdG9hc3RDb250YWluZXJJZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0b2FzdElkIFRoZSB0b2FzdElkIHRvIGNsZWFyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gdG9hc3RDb250YWluZXJJZFxuICAgICAqICAgICAgICBUaGUgdG9hc3RDb250YWluZXJJZCBvZiB0aGUgY29udGFpbmVyIHRvIHJlbW92ZSB0b2FzdHMgZnJvbS5cbiAgICAgKi9cbiAgICBjbGVhcih0b2FzdElkPzogc3RyaW5nLCB0b2FzdENvbnRhaW5lcklkPzogbnVtYmVyKTogdm9pZDtcbn1cbiJdfQ==