import { ChangeDetectorRef, OnInit, OnDestroy, NgZone } from '@angular/core';
import { ToasterConfig } from './toaster-config';
import { ToasterService } from './toaster.service';
import { Toast } from './toast';
import * as ɵngcc0 from '@angular/core';
export declare class ToasterContainerComponent implements OnInit, OnDestroy {
    private ref;
    private ngZone;
    private addToastSubscriber;
    private clearToastsSubscriber;
    private toasterService;
    private timeoutIds;
    toasterconfig: ToasterConfig;
    toasts: Toast[];
    constructor(toasterService: ToasterService, ref: ChangeDetectorRef, ngZone: NgZone);
    ngOnInit(): void;
    click(toast: Toast, isCloseButton?: boolean): false | undefined;
    childClick($event: any): void;
    stopTimer(toast: Toast): void;
    restartTimer(toast: Toast): void;
    private registerSubscribers;
    private addToast;
    private configureTimer;
    private isLimitExceeded;
    private removeToast;
    private removeAllToasts;
    private clearToasts;
    private clearToastsAction;
    private toastIdOrDefault;
    private isNullOrUndefined;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToasterContainerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ToasterContainerComponent, "toaster-container", never, { "toasterconfig": "toasterconfig"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Rlci1jb250YWluZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRvYXN0ZXItY29udGFpbmVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uSW5pdCwgT25EZXN0cm95LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRvYXN0ZXJDb25maWcgfSBmcm9tICcuL3RvYXN0ZXItY29uZmlnJztcbmltcG9ydCB7IFRvYXN0ZXJTZXJ2aWNlIH0gZnJvbSAnLi90b2FzdGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVG9hc3QgfSBmcm9tICcuL3RvYXN0JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRvYXN0ZXJDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSByZWY7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSBhZGRUb2FzdFN1YnNjcmliZXI7XG4gICAgcHJpdmF0ZSBjbGVhclRvYXN0c1N1YnNjcmliZXI7XG4gICAgcHJpdmF0ZSB0b2FzdGVyU2VydmljZTtcbiAgICBwcml2YXRlIHRpbWVvdXRJZHM7XG4gICAgdG9hc3RlcmNvbmZpZzogVG9hc3RlckNvbmZpZztcbiAgICB0b2FzdHM6IFRvYXN0W107XG4gICAgY29uc3RydWN0b3IodG9hc3RlclNlcnZpY2U6IFRvYXN0ZXJTZXJ2aWNlLCByZWY6IENoYW5nZURldGVjdG9yUmVmLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBjbGljayh0b2FzdDogVG9hc3QsIGlzQ2xvc2VCdXR0b24/OiBib29sZWFuKTogZmFsc2UgfCB1bmRlZmluZWQ7XG4gICAgY2hpbGRDbGljaygkZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgc3RvcFRpbWVyKHRvYXN0OiBUb2FzdCk6IHZvaWQ7XG4gICAgcmVzdGFydFRpbWVyKHRvYXN0OiBUb2FzdCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSByZWdpc3RlclN1YnNjcmliZXJzO1xuICAgIHByaXZhdGUgYWRkVG9hc3Q7XG4gICAgcHJpdmF0ZSBjb25maWd1cmVUaW1lcjtcbiAgICBwcml2YXRlIGlzTGltaXRFeGNlZWRlZDtcbiAgICBwcml2YXRlIHJlbW92ZVRvYXN0O1xuICAgIHByaXZhdGUgcmVtb3ZlQWxsVG9hc3RzO1xuICAgIHByaXZhdGUgY2xlYXJUb2FzdHM7XG4gICAgcHJpdmF0ZSBjbGVhclRvYXN0c0FjdGlvbjtcbiAgICBwcml2YXRlIHRvYXN0SWRPckRlZmF1bHQ7XG4gICAgcHJpdmF0ZSBpc051bGxPclVuZGVmaW5lZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19