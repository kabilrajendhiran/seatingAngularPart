import * as ɵngcc0 from '@angular/core';
export declare class NgxPrintDirective {
    _printStyle: any[];
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    printSectionId: string;
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    printTitle: string;
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    useExistingCss: boolean;
    /**
     * A delay in milliseconds to force the print dialog to wait before opened. Default: 0
     *
     * @memberof NgxPrintDirective
     */
    printDelay: number;
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    printStyle: {
        [key: string]: {
            [key: string]: string;
        };
    };
    /**
     *
     *
     * @returns the string that create the stylesheet which will be injected
     * later within <style></style> tag.
     *
     * -join/replace to transform an array objects to css-styled string
     *
     * @memberof NgxPrintDirective
     */
    returnStyleValues(): string;
    /**
     *
     *
     * @returns html for the given tag
     *
     * @memberof NgxPrintDirective
     */
    private _styleSheetFile;
    /**
     * @memberof NgxPrintDirective
     * @param cssList
     */
    styleSheetFile: string;
    /**
     * @returns string which contains the link tags containing the css which will
     * be injected later within <head></head> tag.
     *
     */
    private returnStyleSheetLinkTags;
    private getElementTag;
    /**
     *
     *
     * @memberof NgxPrintDirective
     */
    print(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPrintDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxPrintDirective, "button[ngxPrint]", never, { "useExistingCss": "useExistingCss"; "printDelay": "printDelay"; "printStyle": "printStyle"; "styleSheetFile": "styleSheetFile"; "printSectionId": "printSectionId"; "printTitle": "printTitle"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByaW50LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJuZ3gtcHJpbnQuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neFByaW50RGlyZWN0aXZlIHtcbiAgICBfcHJpbnRTdHlsZTogYW55W107XG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxuICAgICAqL1xuICAgIHByaW50U2VjdGlvbklkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxuICAgICAqL1xuICAgIHByaW50VGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFByaW50RGlyZWN0aXZlXG4gICAgICovXG4gICAgdXNlRXhpc3RpbmdDc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQSBkZWxheSBpbiBtaWxsaXNlY29uZHMgdG8gZm9yY2UgdGhlIHByaW50IGRpYWxvZyB0byB3YWl0IGJlZm9yZSBvcGVuZWQuIERlZmF1bHQ6IDBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxuICAgICAqL1xuICAgIHByaW50RGVsYXk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFByaW50RGlyZWN0aXZlXG4gICAgICovXG4gICAgcHJpbnRTdHlsZToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiB7XG4gICAgICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogQHJldHVybnMgdGhlIHN0cmluZyB0aGF0IGNyZWF0ZSB0aGUgc3R5bGVzaGVldCB3aGljaCB3aWxsIGJlIGluamVjdGVkXG4gICAgICogbGF0ZXIgd2l0aGluIDxzdHlsZT48L3N0eWxlPiB0YWcuXG4gICAgICpcbiAgICAgKiAtam9pbi9yZXBsYWNlIHRvIHRyYW5zZm9ybSBhbiBhcnJheSBvYmplY3RzIHRvIGNzcy1zdHlsZWQgc3RyaW5nXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcbiAgICAgKi9cbiAgICByZXR1cm5TdHlsZVZhbHVlcygpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGh0bWwgZm9yIHRoZSBnaXZlbiB0YWdcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxuICAgICAqL1xuICAgIHByaXZhdGUgX3N0eWxlU2hlZXRGaWxlO1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxuICAgICAqIEBwYXJhbSBjc3NMaXN0XG4gICAgICovXG4gICAgc3R5bGVTaGVldEZpbGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBzdHJpbmcgd2hpY2ggY29udGFpbnMgdGhlIGxpbmsgdGFncyBjb250YWluaW5nIHRoZSBjc3Mgd2hpY2ggd2lsbFxuICAgICAqIGJlIGluamVjdGVkIGxhdGVyIHdpdGhpbiA8aGVhZD48L2hlYWQ+IHRhZy5cbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgcmV0dXJuU3R5bGVTaGVldExpbmtUYWdzO1xuICAgIHByaXZhdGUgZ2V0RWxlbWVudFRhZztcbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFByaW50RGlyZWN0aXZlXG4gICAgICovXG4gICAgcHJpbnQoKTogdm9pZDtcbn1cbiJdfQ==